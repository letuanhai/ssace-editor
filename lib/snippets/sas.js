ace.define("ace/snippets/sas.snippets",[], function(require, exports, module){module.exports = "snippet datastep\n\tdata $1;\n\t    $2\n\trun;\n\nsnippet datanull\n\tdata _null_;\n\t    $1\n\trun;\n\nsnippet commentline\n\t*---------------------------------------------- $1 ------------------------------------------------;\nsnippet commentsection\n\t*--------------------------------------------------------------------------------------------------;\n\t*                                           $1\n\t*--------------------------------------------------------------------------------------------------;\nsnippet fmt\n\tproc format;\n\t    value ${1:txtfmt}\n\t    \"$2\" = \"$3\"\n\t    \"$4\" = \"$5\"\n\t    \"$6\" = \"$7\"\n\t    ;\n\trun;\n\nsnippet sql\n\tproc sql;\n\t    create table $1 as\n\t    select $2\n\t    from $3\n\t\twhere 1=1\n\t\t\tand $4\n\t\torder by $5\n\t\t;\n\tquit;\n\nsnippet do\n\tdo i=$1 to $2;\n\t\t$3;\n\tend;\n\nsnippet dountil\n\tdo until (${1:condition});\n\t\t$2;\n\tend;\n\nsnippet dowhile\n\tdo while (${1:condition});\n\t\t$2;\n\tend;\n\nsnippet select\n\tselect (${1:expression});\n\t\twhen ($2) $3;\n\t\twhen ($4) $5;\n\t\totherwise $6;\n\tend;\n\nsnippet if-then-else\n\tif ${1:condition} then $2;\n\telse $3;\n\nsnippet %macro\n\t%macro ${1:macro_name}(${2:arg},${3:kwarg}=$4);\n\t\t$5;\n\t%mend $1;\n\nsnippet %let\n\t%let ${1:macro_variable}=${2:value};\n\nsnippet %mput\n\t%put &${1:macro_variable}.;\n\nsnippet %mput-error\n\t%put ERROR: ${1:error message};\n\nsnippet %mput-note\n\t%put NOTE: ${1:message};\n\nsnippet %mput-warning\n\t%put WARNING: ${1:message};\n\nsnippet %mif-then-else\n\t%if ${1:condition} %then %do;\n\t\t$2;\n\t%end;\n\t%else %do;\n\t\t$3;\n\t%end;\n\nsnippet %mdo\n\t%do i=$1 %to $2;\n\t\t$3;\n\t%end;\n\nsnippet %mdountil\n\t%do %until (${1:condition});\n\t\t$2;\n\t%end;\n\nsnippet %mdowhile\n\t%do %while (${1:condition});\n\t\t$2;\n\t%end;\n\nsnippet contents\n\tproc contents data=$1;\n\trun;\n\nsnippet datasets\n\tproc datasets lib=$1 memtype=data nolist nodetails kill\n\trun;\nquit;\n\nsnippet import xlsx\n\tproc import\n\t    datafile=\"$1\"\n\t    out=$2\n\t    dbms=xlsx replace\n\t    sheet=\"$3\";\n\trun;\n\nsnippet import csv\n\tproc import\n\t    datafile=\"$1\"\n\t    out=$2\n\t    dbms=csv replace;\n\trun;\n\nsnippet export\n\tproc export data=$1 outfile=\"$2\" dbms=$3 replace;\n\t    putnames=no;\n\trun;\n\nsnippet tabulate\n\tproc tabulate data=$1 format=$2;\n\t\tclass $3;\n\t\tvar $4;\n\t\ttable $5;\n\t\tformat $6;\n\t\ttitle $7;\n\trun;\n\nsnippet print\n\tproc print data=$1;\n\trun;\n\nsnippet sort\n\tproc sort data=$1;\n\t\tby $2;\n\trun;\n\nsnippet rank\n\tproc rank data=$1 out=$2;\n\t    var $3;\n\t    ranks $4;\n\trun;\n\nsnippet freq\n\tproc freq data=$1;\n\t    tables $2/nocol nocum norow;\n\trun;\n\nsnippet corr\n\tproc corr data=$1;\n\t    var $2;\n\trun;\n\nsnippet univariate\n\tproc univariate data=$1 noprint;\n\t    var $2;\n\trun;\n\nsnippet anova\n\tproc anova data=$1;\n\t    class $2;\n\t    model $3;\n\trun;\n\nsnippet cluster\n\tproc cluster data=$1 method=${2|average,centroid,complete,density,eml,flexible,mcquitty,median,single,twostage,ward|};\n\t    var $3;\n\t    id $4;\n\trun;\n\nsnippet factor\n\tproc factor data=$1 simple corr;\n\trun;\n\nsnippet surveyselect\n\tproc surveyselect data=$1 out=$2 method=${3|bernoulli,poisson,pps,brewer,murthy,sampford,chromy,chromy,srs,urs|};\n\t    strata $4;\n\trun;\n\nsnippet reg\n\tproc reg data=$1;\n\t    model $2;\n\trun;\n\nsnippet logistic\n\tproc logistic data=$1;\n\t    class $2;\n\t    model $3;\n\trun;\n\nsnippet transpose\n\tproc transpose data=$1 out=$2;\n\t    by $3;\n\t    var $4;\n\trun;\n\nsnippet lifetest\n\tproc lifetest data=$1 outtest=$2;\n\t    time $3;\n\t    strata $4;\n\trun;\n\nsnippet fastclus\n\tproc fastclus data=$1 out=$2 maxc=$3 maxiter=$4;\n\t    var $5;\n\trun;\n\nsnippet glm\n\tproc glm data=$1;\n\t    class $2;\n\t    model $3;\n\trun;\n\nsnippet mixed\n\tproc mixed data=$1;\n\t    class $2;\n\t    model $3;\n\t    random $4;\n\trun;\n\nsnippet npar1way\n\tproc npar1way data=$1;\n\t    class $2;\n\t    var $3;\n\trun;\n\nsnippet ttest\n\tproc ttest data=$1;\n\t    class $2;\n\t    var $3;\n\trun;\n\nsnippet sgrender\n\tproc sgrender data=$1 template=$2;\n\trun;\n\nsnippet abs\n\tabs(${1})\nsnippet anyalnum\n\tanyalnum(${1})\nsnippet anyalpha\n\tanyalpha(${1})\nsnippet anycntrl\n\tanycntrl(${1})\nsnippet anydigit\n\tanydigit(${1})\nsnippet anyprint\n\tanyprint(${1})\nsnippet anypunct\n\tanypunct(${1})\nsnippet anyspace\n\tanyspace(${1})\nsnippet anyupper\n\tanyupper(${1})\nsnippet attrc\n\tattrc(${1})\nsnippet attrn\n\tattrn(${1})\nsnippet cat\n\tcat(${1})\nsnippet catq\n\tcatq(${1})\nsnippet cats\n\tcats(${1})\nsnippet catt\n\tcatt(${1})\nsnippet catx\n\tcatx(${1})\nsnippet ceil\n\tceil(${1})\nsnippet cmiss\n\tcmiss(${1})\nsnippet coalesce\n\tcoalesce(${1})\nsnippet coalescec\n\tcoalescec(${1})\nsnippet compare\n\tcompare(${1})\nsnippet compbl\n\tcompbl(${1})\nsnippet compged\n\tcompged(${1})\nsnippet complev\n\tcomplev(${1})\nsnippet compress\n\tcompress(${1})\nsnippet count\n\tcount(${1})\nsnippet countc\n\tcountc(${1})\nsnippet countw\n\tcountw(${1})\nsnippet date\n\tdate(${1})\nsnippet datetime\n\tdatetime(${1})\nsnippet day\n\tday(${1})\nsnippet dsname\n\tdsname(${1})\nsnippet exist\n\texist(${1})\nsnippet exp\n\texp(${1})\nsnippet fetch\n\tfetch(${1})\nsnippet fileexist\n\tfileexist(${1})\nsnippet filename\n\tfilename(${1})\nsnippet fileref\n\tfileref(${1})\nsnippet find\n\tfind(${1})\nsnippet findc\n\tfindc(${1})\nsnippet findw\n\tfindw(${1})\nsnippet finfo\n\tfinfo(${1})\nsnippet finv\n\tfinv(${1})\nsnippet floor\n\tfloor(${1})\nsnippet floorz\n\tfloorz(${1})\nsnippet fopen\n\tfopen(${1})\nsnippet hour\n\thour(${1})\nsnippet ifc\n\tifc(${1})\nsnippet ifn\n\tifn(${1})\nsnippet index\n\tindex(${1})\nsnippet indexc\n\tindexc(${1})\nsnippet indexw\n\tindexw(${1})\nsnippet input\n\tinput(${1})\nsnippet inputc\n\tinputc(${1})\nsnippet inputn\n\tinputn(${1})\nsnippet int\n\tint(${1})\nsnippet intck\n\tintck(${1})\nsnippet intnx\n\tintnx(${1})\nsnippet is8601_convert\n\tcall is8601_convert(${1})\nsnippet left\n\tleft(${1})\nsnippet length\n\tlength(${1})\nsnippet lengthc\n\tlengthc(${1})\nsnippet lengthm\n\tlengthm(${1})\nsnippet lengthn\n\tlengthn(${1})\nsnippet log\n\tlog(${1})\nsnippet log10\n\tlog10(${1})\nsnippet log1px\n\tlog1px(${1})\nsnippet log2\n\tlog2(${1})\nsnippet logbeta\n\tlogbeta(${1})\nsnippet max\n\tmax(${1})\nsnippet mdy\n\tmdy(${1})\nsnippet mean\n\tmean(${1})\nsnippet median\n\tmedian(${1})\nsnippet min\n\tmin(${1})\nsnippet minute\n\tminute(${1})\nsnippet missing\n\tcall missing(${1})\nsnippet missing2\n\tmissing(${1})\nsnippet mod\n\tmod(${1})\nsnippet n\n\tn(${1})\nsnippet nmiss\n\tnmiss(${1})\nsnippet open\n\topen(${1})\nsnippet ordinal\n\tordinal(${1})\nsnippet propcase\n\tpropcase(${1})\nsnippet prxchange2\n\tcall prxchange(${1})\nsnippet prxchange\n\tprxchange(${1})\nsnippet prxdebug\n\tcall prxdebug(${1})\nsnippet prxfree\n\tcall prxfree(${1})\nsnippet prxmatch\n\tprxmatch(${1})\nsnippet prxnext\n\tcall prxnext(${1})\nsnippet prxparen\n\tprxparen(${1})\nsnippet prxparse\n\tprxparse(${1})\nsnippet prxposn2\n\tcall prxposn(${1})\nsnippet prxposn\n\tprxposn(${1})\nsnippet prxsubstr\n\tcall prxsubstr(${1})\nsnippet ptrlongadd\n\tptrlongadd(${1})\nsnippet put\n\tput(${1})\nsnippet putc\n\tputc(${1})\nsnippet putn\n\tputn(${1})\nsnippet rank\n\trank(${1})\nsnippet ranuni\n\tranuni(${1})\nsnippet rename\n\trename(${1})\nsnippet round\n\tround(${1})\nsnippet rounde\n\trounde(${1})\nsnippet roundz\n\troundz(${1})\nsnippet saving\n\tsaving(${1})\nsnippet scan2\n\tcall scan(${1})\nsnippet scan\n\tscan(${1})\nsnippet sortc\n\tcall sortc(${1})\nsnippet sortn\n\tcall sortn(${1})\nsnippet soundex\n\tsoundex(${1})\nsnippet spedis\n\tspedis(${1})\nsnippet sqrt\n\tsqrt(${1})\nsnippet std\n\tstd(${1})\nsnippet stderr\n\tstderr(${1})\nsnippet strip\n\tstrip(${1})\nsnippet substr\n\tsubstr(${1})\nsnippet substrn\n\tsubstrn(${1})\nsnippet sum\n\tsum(${1})\nsnippet symget\n\tsymget(${1})\nsnippet symglobl\n\tsymglobl(${1})\nsnippet symlocal\n\tsymlocal(${1})\nsnippet symput\n\tcall symput(${1})\nsnippet symputx\n\tcall symputx(${1})\nsnippet sysexist\n\tsysexist(${1})\nsnippet sysget\n\tsysget(${1})\nsnippet today\n\ttoday(${1})\nsnippet translate\n\ttranslate(${1})\nsnippet transtrn\n\ttranstrn(${1})\nsnippet tranwrd\n\ttranwrd(${1})\nsnippet trim\n\ttrim(${1})\nsnippet trimn\n\ttrimn(${1})\nsnippet trunc\n\ttrunc(${1})\nsnippet upcase\n\tupcase(${1})\nsnippet varlen\n\tvarlen(${1})\nsnippet varname\n\tvarname(${1})\nsnippet varnum\n\tvarnum(${1})\nsnippet varray\n\tvarray(${1})\nsnippet varrayx\n\tvarrayx(${1})\nsnippet vartype\n\tvartype(${1})\nsnippet verify\n\tverify(${1})\nsnippet vformat\n\tvformat(${1})\nsnippet vformatd\n\tvformatd(${1})\nsnippet vformatdx\n\tvformatdx(${1})\nsnippet vformatn\n\tvformatn(${1})\nsnippet vformatnx\n\tvformatnx(${1})\nsnippet vformatw\n\tvformatw(${1})\nsnippet vformatwx\n\tvformatwx(${1})\nsnippet vformatx\n\tvformatx(${1})\nsnippet vinarray\n\tvinarray(${1})\nsnippet vinarrayx\n\tvinarrayx(${1})\nsnippet vinformat\n\tvinformat(${1})\nsnippet vinformatd\n\tvinformatd(${1})\nsnippet vinformatdx\n\tvinformatdx(${1})\nsnippet vinformatn\n\tvinformatn(${1})\nsnippet vinformatnx\n\tvinformatnx(${1})\nsnippet vinformatw\n\tvinformatw(${1})\nsnippet vinformatwx\n\tvinformatwx(${1})\nsnippet vinformatx\n\tvinformatx(${1})\nsnippet vlabel\n\tvlabel(${1})\nsnippet vlabelx\n\tvlabelx(${1})\nsnippet vlength\n\tvlength(${1})\nsnippet vlengthx\n\tvlengthx(${1})\nsnippet vname2\n\tcall vname(${1})\nsnippet vname\n\tvname(${1})\nsnippet vnamex\n\tvnamex(${1})\nsnippet vnext\n\tcall vnext(${1})\nsnippet vtype\n\tvtype(${1})\nsnippet vtypex\n\tvtypex(${1})\nsnippet vvalue\n\tvvalue(${1})\nsnippet vvaluex\n\tvvaluex(${1})\nsnippet week\n\tweek(${1})\nsnippet weekday\n\tweekday(${1})\nsnippet whichc\n\twhichc(${1})\nsnippet whichn\n\twhichn(${1})\nsnippet year\n\tyear(${1})\nsnippet yieldp\n\tyieldp(${1})\nsnippet yrdif\n\tyrdif(${1})\n";

});

ace.define("ace/snippets/sas",[], function(require, exports, module){"use strict";
exports.snippetText = require("./sas.snippets");
exports.scope = "sas";

});                (function() {
                    ace.require(["ace/snippets/sas"], function(m) {
                        if (typeof module == "object" && typeof exports == "object" && module) {
                            module.exports = m;
                        }
                    });
                })();
            